name: Test LodeRunner.Lib-PR

on:
  pull_request:
    types: [opened, synchronize]

#  library changes should cause full rebuild and test of all

    paths:  
      - 'src/LodeRunner.Core/*.csproj'
      - 'src/LodeRunner.Core/**.cs'
      - 'src/LodeRunner.Data/*.csproj'
      - 'src/LodeRunner.Data/**.cs'
      - '.github/workflows/l8r-lib-pr.yaml'


jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Docker Build LodeRunner
      run: |
        docker build ./src -t image -f ./src/LodeRunner/Dockerfile

    - name: Docker Run and Test LodeRunner Traditional - In-Memory
      run: |
        docker run -d --rm -p 80:8080 --name ngsa ghcr.io/retaildevcrews/ngsa-app:beta --in-memory

        echo "Waiting for ngsa-app to start ..."

        wait_time=10
        sleep $wait_time

        # wait up to 30 seconds for ngsa-app to start
        while true
        do
          if curl localhost:80/version ; then
            echo -e "\n ngsa-app is running"
            break
          fi
          if [ $wait_time -gt 30 ] ; then
            echo -e "\n timeout waiting for ngsa-app to start"
            exit 1
          fi

          sleep 1
          ((wait_time=wait_time+1))
        done

        echo "Running In-Memory benchmark and baseline"

        docker run --rm --net=host image -s http://localhost:80 -f --max-errors 1 -f baseline.json benchmark.json
    - name: Set Secrets
      run: |
        mkdir -p /tmp/secrets
        echo -n ${{ secrets.NGSA_DEV_COSMOS_RW_KEY }} >| /tmp/secrets/CosmosKey
        echo -n ${{ secrets.NGSA_DEV_COSMOS_URL }} >| /tmp/secrets/CosmosUrl
        echo -n 'LodeRunner' >| /tmp/secrets/CosmosCollection
        echo -n 'LodeRunnerTestDB' >| /tmp/secrets/CosmosDatabase

    - name: Docker Run LodeRunner Await mode.
      run: |
        echo "Running LoadRunner..."

        timeout --preserve-status --kill-after=5 --signal=SIGTERM 30 docker run --rm --name l8rAwait --net=host -v /tmp/secrets:/app/secrets image --delay-start -1 --secrets-volume /app/secrets -s http://localhost:80 -f benchmark.json;

        echo "LodeRunner Await mode container was successfully terminated after it ran for 30 seconds."
    
    - name: Docker Build LodeRunner API
      run: |
        docker build ./src -t imageapi -f ./src/LodeRunner.API/Dockerfile

    - name: Docker Run and Test LodeRunner API
      run: |

        docker run --name loderunnerAPI -d --rm -p 8081:8080 -v /tmp/secrets:/app/secrets imageapi

        echo "Waiting for LodeRunner API to start ..."

        wait_time=10
        sleep $wait_time

        # wait up to 30 seconds for LodeRunner API to start
        while true
        do
          if curl localhost:8081/version ; then
            echo -e "\n LodeRunner API is running"
            break
          fi
          if [ $wait_time -gt 30 ] ; then
            echo -e "\n timeout waiting for LodeRunner API to start"
            exit 1
          fi

          sleep 1
          ((wait_time=wait_time+1))
        done

    - name: Delete Secrets
      run: |
        rm -rf /tmp/secrets

    - name: Run Linter on LodeRunner.UI
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install npm packages
      run: npm install --prefix ./src/LodeRunner.UI
    - name: Run Linter on ./src/LodeRunner.UI 
      run: npm run lint --prefix ./src/LodeRunner.UI      

    - name: Docker Build LodeRunner.UI
      run: |
        docker build -t loderunnerUI ./src/LodeRunner.UI

    - name: Docker Run and Test LodeRunner.UI
      run: |
            
            docker run --name l8rUI -d --rm -p 8080:80 loderunnerUI

            echo "Waiting for web server to start ..."
        
            wait_time=10        
            sleep $wait_time
            # wait up to 30 seconds for web server to start
            while true
            do
                if curl localhost:8080 ; then
                    echo -e "\n LodeRunner.UI is running"
                    break
                fi
                if [ $wait_time -gt 30 ] ; then
                  echo -e "\n timeout waiting for LodeRunner-UI to start"
                  exit 1
                fi
                
                sleep 1
                ((wait_time=wait_time+1))
            done   

